#!/usr/bin/env node

const INIT_BUF_SIZE = 2

const NL = '\n'.charCodeAt(0) // New Line
const LCB = '{'.charCodeAt(0) // Left Curly Brace

function get_json_lines(cb) {
  let buffer = Buffer.alloc(INIT_BUF_SIZE)
  let write_pos = 0

  const appendBuf = chunk => {
    if (write_pos + chunk.byteLength > buffer.byteLength) {
      const tmp = Buffer.alloc((write_pos + chunk.byteLength) * 2)
      buffer.copy(tmp)
      buffer = tmp
    }
    chunk.copy(buffer, write_pos)
    write_pos += chunk.byteLength
  }

  const checkPublish = view => {
    const str = view.toString('utf8').trim()
    if (str.length > 0) {
      try {
        const data = JSON.parse(str)
        cb(data)
      } catch (e) {
        console.error('[json-log-tx] failed to parse json:', e)
      }
    }
  }

  const checkProcess = () => {
    if (write_pos < 1) {
      return
    }
    let view = buffer.slice(0, write_pos)
    const idx = view.indexOf(NL)
    if (idx < 0) {
      return
    }
    view = view.slice(0, idx)
    if (view[0] === LCB) {
      checkPublish(view)
    } else {
      process.stderr.write(view)
      console.error() // newline + flush
    }
    buffer.copy(buffer, 0, idx + 1)
    write_pos -= idx + 1
    checkProcess()
  }

  process.stdin.on('readable', () => {
    while ((chunk = process.stdin.read()) !== null) {
      appendBuf(chunk)
      checkProcess()
    }
  })

  process.stdin.on('end', () => {
    appendBuf(Buffer.from([NL]))
    checkProcess()
  })

  process.stdin.on('error', e => {
    console.error(e)
    process.exit(1)
  })
}

function main() {
  get_json_lines(data => {
    delete data.name
    const spans = data.spans
    delete data.spans
    let parents = ''
    let parents_long = []
    for (let p of spans) {
      if (parents.length > 0) {
        parents += '/'
      }
      parents += p.name.replace(/\//g, "\\/")
      parents_long.push([p.name, p.id, `${p.file}:${p.line}`])
    }
    data.parents = parents
    data.parents_long = parents_long
    const fields = data.fields
    delete data.fields
    for (key in fields) {
      data[key] = fields[key]
    }
    const target = data['log.target'] || data.target
    const mod = data['log.module_path'] || data.module_path
    const file = data['log.file'] || data.file
    const line = data['log.line'] || data.line
    delete data['log.target']
    delete data['log.module_path']
    delete data['log.file']
    delete data['log.line']
    delete data['log.target']
    data.target = target
    data.module_path = mod
    delete data.file
    delete data.line
    data.src = `${file}:${line}`
    data.__complete__ = JSON.stringify(data)
    console.log(JSON.stringify(data))
  })
}

// entry point
main()
